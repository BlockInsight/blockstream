// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package worker

import (
	context "context"
	fmt "fmt"
	types "github.com/blockinsight/blockstream/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PullRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Count                uint64   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullRequest) Reset()         { *m = PullRequest{} }
func (m *PullRequest) String() string { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()    {}
func (*PullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{0}
}

func (m *PullRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullRequest.Unmarshal(m, b)
}
func (m *PullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullRequest.Marshal(b, m, deterministic)
}
func (m *PullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest.Merge(m, src)
}
func (m *PullRequest) XXX_Size() int {
	return xxx_messageInfo_PullRequest.Size(m)
}
func (m *PullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest proto.InternalMessageInfo

func (m *PullRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PullRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PullRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type PullResponse struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Offset               uint64            `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Output               *types.TaskOutput `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PullResponse) Reset()         { *m = PullResponse{} }
func (m *PullResponse) String() string { return proto.CompactTextString(m) }
func (*PullResponse) ProtoMessage()    {}
func (*PullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{1}
}

func (m *PullResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullResponse.Unmarshal(m, b)
}
func (m *PullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullResponse.Marshal(b, m, deterministic)
}
func (m *PullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullResponse.Merge(m, src)
}
func (m *PullResponse) XXX_Size() int {
	return xxx_messageInfo_PullResponse.Size(m)
}
func (m *PullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullResponse proto.InternalMessageInfo

func (m *PullResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PullResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PullResponse) GetOutput() *types.TaskOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

type PullCommitRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullCommitRequest) Reset()         { *m = PullCommitRequest{} }
func (m *PullCommitRequest) String() string { return proto.CompactTextString(m) }
func (*PullCommitRequest) ProtoMessage()    {}
func (*PullCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{2}
}

func (m *PullCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullCommitRequest.Unmarshal(m, b)
}
func (m *PullCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullCommitRequest.Marshal(b, m, deterministic)
}
func (m *PullCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullCommitRequest.Merge(m, src)
}
func (m *PullCommitRequest) XXX_Size() int {
	return xxx_messageInfo_PullCommitRequest.Size(m)
}
func (m *PullCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullCommitRequest proto.InternalMessageInfo

func (m *PullCommitRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PullCommitRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type PullCommitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullCommitResponse) Reset()         { *m = PullCommitResponse{} }
func (m *PullCommitResponse) String() string { return proto.CompactTextString(m) }
func (*PullCommitResponse) ProtoMessage()    {}
func (*PullCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{3}
}

func (m *PullCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullCommitResponse.Unmarshal(m, b)
}
func (m *PullCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullCommitResponse.Marshal(b, m, deterministic)
}
func (m *PullCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullCommitResponse.Merge(m, src)
}
func (m *PullCommitResponse) XXX_Size() int {
	return xxx_messageInfo_PullCommitResponse.Size(m)
}
func (m *PullCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullCommitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PullRequest)(nil), "worker.PullRequest")
	proto.RegisterType((*PullResponse)(nil), "worker.PullResponse")
	proto.RegisterType((*PullCommitRequest)(nil), "worker.PullCommitRequest")
	proto.RegisterType((*PullCommitResponse)(nil), "worker.PullCommitResponse")
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor_e4ff6184b07e587a) }

var fileDescriptor_e4ff6184b07e587a = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xcf, 0x2f, 0xca,
	0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0xb8, 0x4b, 0x2a,
	0x0b, 0x52, 0x8b, 0x21, 0x82, 0x4a, 0xde, 0x5c, 0xdc, 0x01, 0xa5, 0x39, 0x39, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x4c, 0x99, 0x29, 0x42, 0x62, 0x5c, 0x6c, 0xf9, 0x69, 0x69, 0xc5, 0xa9, 0x25, 0x12, 0x4c,
	0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x50, 0x9e, 0x90, 0x08, 0x17, 0x6b, 0x72, 0x7e, 0x69, 0x5e, 0x89,
	0x04, 0x33, 0x58, 0x18, 0xc2, 0x51, 0x4a, 0xe4, 0xe2, 0x81, 0x18, 0x56, 0x5c, 0x90, 0x9f, 0x57,
	0x9c, 0x4a, 0xb4, 0x69, 0x9a, 0x5c, 0x6c, 0xf9, 0xa5, 0x25, 0x05, 0xa5, 0x10, 0xe3, 0xb8, 0x8d,
	0x04, 0xf5, 0x20, 0x4e, 0x0c, 0x49, 0x2c, 0xce, 0xf6, 0x07, 0x4b, 0x04, 0x41, 0x15, 0x28, 0x59,
	0x73, 0x09, 0x82, 0xac, 0x70, 0xce, 0xcf, 0xcd, 0xcd, 0x2c, 0x21, 0xd1, 0xd5, 0x4a, 0x22, 0x5c,
	0x42, 0xc8, 0x9a, 0x21, 0xae, 0x34, 0xea, 0x63, 0xe4, 0x62, 0x0b, 0x07, 0x07, 0x8d, 0x90, 0x25,
	0x17, 0x17, 0x48, 0x01, 0xc4, 0x4e, 0x21, 0x61, 0x3d, 0x68, 0xf8, 0x21, 0x85, 0x90, 0x94, 0x08,
	0xaa, 0x20, 0xc4, 0x0c, 0x03, 0x46, 0x21, 0x4f, 0x2e, 0x01, 0x84, 0x56, 0x88, 0x0d, 0x42, 0x92,
	0xc8, 0x6a, 0x51, 0x9c, 0x2c, 0x25, 0x85, 0x4d, 0x0a, 0x62, 0x58, 0x12, 0x1b, 0x38, 0x6a, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x21, 0xff, 0x1b, 0xbf, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	PullOutput(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Worker_PullOutputClient, error)
	PullOutputCommit(ctx context.Context, in *PullCommitRequest, opts ...grpc.CallOption) (*PullCommitResponse, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) PullOutput(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Worker_PullOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/worker.Worker/PullOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerPullOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_PullOutputClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type workerPullOutputClient struct {
	grpc.ClientStream
}

func (x *workerPullOutputClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) PullOutputCommit(ctx context.Context, in *PullCommitRequest, opts ...grpc.CallOption) (*PullCommitResponse, error) {
	out := new(PullCommitResponse)
	err := c.cc.Invoke(ctx, "/worker.Worker/PullOutputCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	PullOutput(*PullRequest, Worker_PullOutputServer) error
	PullOutputCommit(context.Context, *PullCommitRequest) (*PullCommitResponse, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_PullOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).PullOutput(m, &workerPullOutputServer{stream})
}

type Worker_PullOutputServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type workerPullOutputServer struct {
	grpc.ServerStream
}

func (x *workerPullOutputServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_PullOutputCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).PullOutputCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/PullOutputCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).PullOutputCommit(ctx, req.(*PullCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullOutputCommit",
			Handler:    _Worker_PullOutputCommit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullOutput",
			Handler:       _Worker_PullOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker.proto",
}
